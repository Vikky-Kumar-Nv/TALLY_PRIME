// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(ADMIN)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// enum Role {
//   ADMIN
//   SUB_ADMIN
// }
// User model for authentication
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  companies Company[]
}

// Role enum for role-based access control
enum Role {
  ADMIN
  USER
}

// Company model for company information
model Company {
  id                 Int       @id @default(autoincrement())
  name               String
  financialYear      String
  booksBeginningYear String
  address            String?
  pin                String?
  phoneNumber        String?
  email              String?
  panNumber          String?
  gstNumber          String?
  state              String?
  country            String?
  userId             Int
  user               User      @relation(fields: [userId], references: [id])
  ledgers            Ledger[]
  vouchers           Voucher[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

// Ledger model for ledger accounts
model Ledger {
  id             Int      @id @default(autoincrement())
  name           String
  openingBalance Float    @default(0.0)
  companyId      Int
  company        Company  @relation(fields: [companyId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Voucher model for vouchers
model Voucher {
  id        Int      @id @default(autoincrement())
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
